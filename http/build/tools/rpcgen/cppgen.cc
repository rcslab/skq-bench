
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <iostream>
#include <fstream>

#include "lexer.h"
#include "parser.h"
#include "cppgen.h"

using namespace std;

CPPGen::CPPGen() : output()
{
}

CPPGen::~CPPGen()
{
}

string
CPPGen::getType(TypeNode *node)
{
    static map<string,string> typeMap = {
	{ "void", "void" },
	{ "int8", "int8_t" },
	{ "int16", "int16_t" },
	{ "int32", "int32_t" },
	{ "int64", "int64_t" },
	{ "uint8", "uint8_t" },
	{ "uint16", "uint16_t" },
	{ "uint32", "uint32_t" },
	{ "uint64", "uint64_t" },
	{ "string", "std::string" }
    };

    return typeMap[node->type];
}

void
CPPGen::printDecl(CallNode *node)
{
    output << "    " << getType(node->retType.get())
		 << " " << node->name << "(";
    for (size_t i = 0; i < node->paramType.size(); i++) {
	if (i != 0)
	output << ", ";
	output << getType(node->paramType[i].get())
		     << " " << node->paramName[i];
    }
    output << ");" << endl;
}

void
CPPGen::printClient(const string &name, CallNode *node)
{
    output << getType(node->retType.get()) << endl;

    output << name + "::" + node->name << "(";
    for (size_t i = 0; i < node->paramType.size(); i++) {
	if (i != 0)
	output << ", ";
	output << getType(node->paramType[i].get())
		     << " " << node->paramName[i];
    }
    output << ") {" << endl;

    output << "    // XXX: Fill in packet processing" << endl;
    output << "}" << endl << endl;
}

void
CPPGen::printStub(const string &name, CallNode *node)
{
    output << getType(node->retType.get()) << endl;

    output << name + "Server::" + node->name << "(";
    for (size_t i = 0; i < node->paramType.size(); i++) {
	if (i != 0)
	output << ", ";
	output << getType(node->paramType[i].get())
		     << " " << node->paramName[i];
    }
    output << ") {" << endl;

    output << "    // XXX: Fill in packet processing" << endl;
    output << "}" << endl << endl;
}

void
CPPGen::compileService(ServiceNode *node)
{
    // Generate Client Header
    cout << "Generating: " << node->name + "Client.h" << endl;
    output.open(node->name + "Client.h", fstream::out);

    output << "/* Autogenerated Header */" << endl << endl;
    output << "class " + node->name + " : public ServiceClient {" << endl;
    output << "public:" << endl;
    output << "    " + node->name + "();" << endl;
    output << "    ~" + node->name + "();" << endl;

    for (auto &it : node->calls) {
	printDecl(it.get());
    }

    output << "};" << endl;
    output.close();

    // Generate Client Code
    cout << "Generating: " << node->name + "Client.cc" << endl;
    output.open(node->name + "Client.cc", fstream::out);

    output << "/* Autogenerated */" << endl << endl;

    output << node->name << "::" << node->name << "() {" << endl;
    output << "}" << endl << endl;
    output << node->name << "::~" << node->name << "() {" << endl;
    output << "}" << endl << endl;

    for (auto &it : node->calls) {
	printClient(node->name, it.get());
    }

    output.close();

    // Generate Server Header
    cout << "Generating: " << node->name + "Server.h" << endl;
    output.open(node->name + "Server.h", fstream::out);

    output << "/* Autogenerated Header */" << endl << endl;
    output << "class " + node->name + " : public ServiceServer {" << endl;
    output << "public:" << endl;
    output << "    " + node->name + "();" << endl;
    output << "    ~" + node->name + "();" << endl;

    output << "protected:" << endl;
    output << "    virtual void dispatch();" << endl;

    for (auto &it : node->calls) {
	printDecl(it.get());
    }

    output << "};" << endl;
    output.close();

    // Generate Server Code
    cout << "Generating: " << node->name + "Server.cc" << endl;
    output.open(node->name + "Server.cc", fstream::out);

    output << "/* Autogenerated */" << endl << endl;

    output << node->name << "Server::" << node->name << "Server() {" << endl;
    output << "}" << endl << endl;
    output << node->name << "Server::~" << node->name << "Server() {" << endl;
    output << "}" << endl << endl;

    output << "virtual void" << endl;
    output << node->name + "Server::dispatch() {" << endl;
    output << "}" << endl << endl;;

    for (auto &it : node->calls) {
	printStub(node->name, it.get());
    }

    output.close();
}

void
CPPGen::compile(std::unique_ptr<FileNode> node)
{
    for (auto &it : node->nodes) {
	if (typeid(ServiceNode) == typeid(*it)) {
	    compileService(dynamic_cast<ServiceNode*>(it.get()));
	}
    }
}

